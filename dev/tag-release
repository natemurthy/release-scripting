#!/bin/bash
#
# A script for tagging releases, publishing build artifacts for the provided
# tagged release, and for pushing release tag to repository.

[ $# -eq 0 ] && { echo "Usage: $0 [SNAPSHOT_VERSION] [RELEASE_VERSION]"; exit 1; }

PROJ_DIR="$(cd "`dirname $0`"/..; pwd)"
SNAPSHOT_VERSION=$1
RELEASE_VERSION=$2
SEMVER_REGEX='(([0-9]+(\.[0-9]+)*))'

cd "$PROJ_DIR"

VERSION_SBT="$(cut -d '"' -f2 < version.sbt)"

RED_START='\e[31m'
GRN_START='\e[32m'
COLOR_END='\e[0m'

fail() {
    echo -e $RED_START"Failed to tag release"$COLOR_END
    exit 1
}

reapply_snapshot_version() {
    sed -i -e "s/$RELEASE_VERSION/$SNAPSHOT_VERSION/g" conf/application.conf
    sed -i -e "s/$RELEASE_VERSION/$SNAPSHOT_VERSION/g" version.sbt
    git add conf/application.conf version.sbt
    git commit -m "MINOR: re-apply snapshot version to project"
    git checkout develop && git merge master
}

publish_artifacts() {
    echo "publish artifacts"
}

tag_release() {
    git checkout develop
    new_readme="Latest on master: \`$SNAPSHOT_VERSION\`. Latest release tag: \`$RELEASE_VERSION\`"
    sed -i -e "s/.*Latest on master.*/$new_readme/g" README.md
    sed -i -e "s/$SNAPSHOT_VERSION/$RELEASE_VERSION/g" conf/application.conf
    sed -i -e "s/$SNAPSHOT_VERSION/$RELEASE_VERSION/g" version.sbt
    git diff README.md version.sbt conf/application.conf
    git add README.md version.sbt conf/application.conf
    read -r -p "!! PUSH TO REMOTE !! Do the changes above look correct? [y/N] " response
    if [[ $response =~ $YES_REGEX ]]
    then
        git status
    else
        git reset
        git checkout README.md version.sbt conf/application.conf
        echo "Undoing changes. Exiting script."
        exit 0
    fi
    git status
    git commit -m "MINOR: set release version to $RELEASE_VERSION"
    git checkout master && git merge develop
    git tag -a v$RELEASE_VERSION -m "$RELEASE_VERSION"
    git push --follow-tags
    publish_artifacts
    reapply_snapshot_version
    git log --oneline --decorate | grep "tag: " | grep $RELEASE_VERSION
    curr_branch=`git name-rev --name-only HEAD`
    echo -e $GRN_START"Successfully tagged release $RELEASE_VERSION. Current branch: $curr_branch"$COLOR_END
    exit 0
}

if [ $SNAPSHOT_VERSION == $VERSION_SBT ]
then
    if [[ $RELEASE_VERSION =~ $SEMVER_REGEX ]]
    then
        echo "Valid semantic version: $RELEASE_VERSION"
        tag_release
    else
        echo "Invalid semantic version: $RELEASE_VERSION"
        fail
    fi
else
    echo "$SNAPSHOT_VERSION does not match $VERSION_SBT in version.sbt"
    fail
fi
